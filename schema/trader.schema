package trader;

import "messages.schema";
import "commodity.schema";

type InventoryItem {
  double size = 1;
  int32 quantity = 2;
}

type Production {
  commodity.Commodity item = 1;
  int32 quantity = 2;
  double chance = 3;
}

type Consumption {
  commodity.Commodity item = 1;
  int32 quantity = 2;
  double chance = 3;
}

type Building {
  list<Production> produces = 1;
  list<Consumption> requires = 2;
  // The way priority works is that an AI will try to
  // operate ALL the building(s) with the lowest priority score (1 = max priority)
  int32 priority = 3;
  string debug_name = 4;
  bool repeatable = 5;
}

component Metadata {
  id = 4000;
  string name = 1;
  uint64 birthday = 2;
  bool ai_flag = 3;
}

component Inventory {
  id = 4001;
  double cash = 1;
  map<string, InventoryItem> inv = 2;

  int32 capacity = 3;
}

component AIBuildings {
  id = 4002;
  list<Building> buildings = 1;
  double idle_tax = 2;
}

component ProduceCommandComponent {
  id = 4003;
  command messages.ProduceCommandResponse produce_command(messages.ProduceCommandRequest);
}

component ReportOfferResultComponent {
  id = 4010;
  command messages.EmptyMessage report_bid_offer(messages.BidResult);
  command messages.EmptyMessage report_ask_offer(messages.AskResult);
}

component_set ServerTraderComponentSet {
  id = 4004;
  components = [Inventory, ProduceCommandComponent, AIBuildings];
}

component_set ClientTraderComponentSet {
  id = 4005;
  components = [Metadata, ReportOfferResultComponent];
}