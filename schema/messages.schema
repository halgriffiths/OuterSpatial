package messages;

import "commodity.schema";

enum AgentType {
  MONITOR = 0;
  AI_TRADER= 1;
  HUMAN_TRADER = 2;
}

enum AIRole {
  NONE = 0;
  HUMAN = 1;
  FARMER = 2;
  WOODCUTTER = 3;
  COMPOSTER = 4;
  MINER = 5;
  REFINER = 6;
  BLACKSMITH = 7;
}

enum TradeOutcome {
  // Order completed (all goods bought/sold)
  FILLED = 1;
  // Some, but not all, of the requested goods were bought/sold
  MIXED = 2;
  // Nothing was bought/sold
  EMPTY = 3;
  // Order failed (eg: missing stake, malformed request, etc)
  REJECTED = 4;
}

type BidOffer {
  EntityId sender_id = 1;
  string good = 2;
  uint64 expiry_time = 3;
  int32 quantity = 4;
  double unit_price = 5;
}

type AskOffer {
  EntityId sender_id = 1;
  string good = 2;
  uint64 expiry_time = 3;
  int32 quantity = 4;
  double unit_price = 5;
}

type BidResult {
  string good = 1;

  int32 quantity_bought = 2;
  int32 quantity_unbought = 3;
  double avg_price = 4;

  bool broker_fee_paid = 5;
  TradeOutcome outcome = 6; // TODO: Currently unused field. Either use it or lose it.
}

type AskResult {
  string good = 1;

  int32 quantity_sold = 2;
  int32 quantity_unsold = 3;
  double avg_price = 4;

  bool broker_fee_paid = 5;
  TradeOutcome outcome = 6;
}

type RegisterRequest {
  AgentType type = 1;
  AIRole requested_role = 2;
  //int64 requested_id = 2;
}

type RegisterResponse {
  bool accepted = 1;

  int64 entity_id = 2;
  list<commodity.Commodity> listed_items = 3;
  AIRole assigned_role = 4;
}

type ShutdownRequest {
  int64 entity_id = 1;
  AIRole role = 2;
  double age_ms = 3;
  int64 age_ticks = 4;
}

type ShutdownResponse {
  bool accepted = 1;
}

type EmptyMessage {
  bool ack = 1; //not sure if an empty type is allowed so we have this pointless field
}

type ProductionRequest {
  int32 sender_id = 1;
}
type ProductionResponse {
  bool bankrupt = 1;
  map<string, int32> useful_production_result = 2;
  map<string, int32> overproduction_result = 3;
  map<string, int32> consumption_result = 4;
}